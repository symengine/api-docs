.. index:: pair: class; SymEngine::Add
.. _doxid-class_sym_engine_1_1_add:

class SymEngine::Add
====================

.. toctree::
	:hidden:

Overview
~~~~~~~~

:ref:`Add <doxid-class_sym_engine_1_1_add>` class keeps an addition of symbolic expressions. :ref:`More...<details-class_sym_engine_1_1_add>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <add.h>
	
	class Add: public :ref:`SymEngine::Basic<doxid-class_sym_engine_1_1_basic>` {
	public:
		// construction
	
		:ref:`Add<doxid-class_sym_engine_1_1_add_1ac832f62e9a48f2c19d41ab921cf9e5a6>`(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`&& dict);

		// methods
	
		virtual :ref:`hash_t<doxid-namespace_sym_engine_1a455620f815334592057d7966d62d5de6>` :ref:`__hash__<doxid-class_sym_engine_1_1_add_1a1e7cf7534f01607a31f6bcbebe91001e>`() const;
		virtual bool :ref:`__eq__<doxid-class_sym_engine_1_1_add_1aaa89b52a2593191b97c662839a8ab8da>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const;
		virtual int :ref:`compare<doxid-class_sym_engine_1_1_add_1a5f1511d3891ec886a1a0f0f501ca05a2>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const;
		void :ref:`as_two_terms<doxid-class_sym_engine_1_1_add_1a730c364a7004b3732eee2ac0eb8ac591>`(const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& a, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& b) const;
		bool :ref:`is_canonical<doxid-class_sym_engine_1_1_add_1a7782a0236cf42833ff18d00da711f353>`(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, const :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`& dict) const;
		virtual :ref:`vec_basic<doxid-namespace_sym_engine_1a7b5fa751fc652b4e8a3b0e1cf1d7d9d1>` :ref:`get_args<doxid-class_sym_engine_1_1_add_1ada43e03b4589aa1399e80b11be4c2b37>`() const;
		const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& :ref:`get_coef<doxid-class_sym_engine_1_1_add_1ab625ca9ff6463bfc394caf9b1bb649ca>`() const;
		const :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`& :ref:`get_dict<doxid-class_sym_engine_1_1_add_1aeaa562e337f5f1aa2607af177ca98219>`() const;
		static RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`from_dict<doxid-class_sym_engine_1_1_add_1a307db20756a09c9f2bc7a5983e3ea3fb>`(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`&& d);
		static void :ref:`dict_add_term<doxid-class_sym_engine_1_1_add_1ab78c545d33cd594482669eb3b3a64949>`(:ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`& d, const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& t);
		static void :ref:`coef_dict_add_term<doxid-class_sym_engine_1_1_add_1a64a2d1ac7763318fb25ad10f050cf475>`(const Ptr<RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>>& coef, :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`& d, const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& c, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& term);
		static void :ref:`as_coef_term<doxid-class_sym_engine_1_1_add_1aef5fea9002f5edbcc2e88bb31ec4f06c>`(const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& self, const Ptr<RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>>& coef, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& term);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// fields
	
		:ref:`TypeID<doxid-namespace_sym_engine_1a976db42c9dfad76ad2c95a6038cbc093>` :ref:`type_code_<doxid-class_sym_engine_1_1_basic_1afc3cac9dbdf56974a961c8b2cdb4dfea>`;

		// methods
	
		RCP<T> :ref:`rcp_from_this<doxid-class_sym_engine_1_1_enable_r_c_p_from_this_1aed6b2bd25fd3fd124a5e97427f8372f2>`();
		RCP<const T> :ref:`rcp_from_this<doxid-class_sym_engine_1_1_enable_r_c_p_from_this_1aefdd4958f591ee705b60ea92d661a775>`() const;
	
		template <class T2>
		RCP<const T2> :ref:`rcp_from_this_cast<doxid-class_sym_engine_1_1_enable_r_c_p_from_this_1a122635053dc63f074487aa3ba0df13a1>`() const;
	
		unsigned int :ref:`use_count<doxid-class_sym_engine_1_1_enable_r_c_p_from_this_1acbea1ba6881779f17a5b81c0fd0eb2d2>`() const;
		:ref:`TypeID<doxid-namespace_sym_engine_1a976db42c9dfad76ad2c95a6038cbc093>` :ref:`get_type_code<doxid-class_sym_engine_1_1_basic_1a3837186572bf82a499cf81259d945804>`() const;
		:ref:`Basic<doxid-class_sym_engine_1_1_basic>`& :ref:`operator=<doxid-class_sym_engine_1_1_basic_1a8ddc236758a9cdd0fafadad57bfa4b09>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`&);
		:ref:`Basic<doxid-class_sym_engine_1_1_basic>`& :ref:`operator=<doxid-class_sym_engine_1_1_basic_1af04d269a2434302330e05a94238527a2>`(:ref:`Basic<doxid-class_sym_engine_1_1_basic>`&&);
		virtual :ref:`hash_t<doxid-namespace_sym_engine_1a455620f815334592057d7966d62d5de6>` :ref:`__hash__<doxid-class_sym_engine_1_1_basic_1ac950eca7e8403248252115bcba2e3ab1>`() const = 0;
		:ref:`hash_t<doxid-namespace_sym_engine_1a455620f815334592057d7966d62d5de6>` :ref:`hash<doxid-class_sym_engine_1_1_basic_1af71e629c952b7390d72f2d4b24694b62>`() const;
		virtual bool :ref:`__eq__<doxid-class_sym_engine_1_1_basic_1ac6a957e2006026f74c08ae6795f5ff7f>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const = 0;
		bool :ref:`__neq__<doxid-class_sym_engine_1_1_basic_1a3a3e923c9078ac82e01e453e80fa2134>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const;
		int :ref:`__cmp__<doxid-class_sym_engine_1_1_basic_1adb2def25bca4104f085ae99c57af5ab3>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const;
		virtual int :ref:`compare<doxid-class_sym_engine_1_1_basic_1af03cfca16a93aaa0aff2382cc2b5087f>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const = 0;
		std::string :ref:`__str__<doxid-class_sym_engine_1_1_basic_1a905153d35107acc23b37e04e1b430420>`() const;
		RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`subs<doxid-class_sym_engine_1_1_basic_1a7a502ee14598f873fefff54fac433d48>`(const :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& subs_dict) const;
		RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`xreplace<doxid-class_sym_engine_1_1_basic_1a2a7d7c5de904a663634679523c9a5348>`(const :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& subs_dict) const;
		virtual RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`expand_as_exp<doxid-class_sym_engine_1_1_basic_1a6423cc8431a87cbb88e010887904b274>`() const;
		virtual :ref:`vec_basic<doxid-namespace_sym_engine_1a7b5fa751fc652b4e8a3b0e1cf1d7d9d1>` :ref:`get_args<doxid-class_sym_engine_1_1_basic_1a6544293931047d6d9097e81f7d306cae>`() const = 0;
		RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`diff<doxid-class_sym_engine_1_1_basic_1ad4e255f317caaaf57acabff9f6161b65>`(const RCP<const :ref:`Symbol<doxid-class_sym_engine_1_1_symbol>`>& x, bool cache = true) const;

.. _details-class_sym_engine_1_1_add:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`Add <doxid-class_sym_engine_1_1_add>` class keeps an addition of symbolic expressions. Internal representation of an :ref:`Add <doxid-class_sym_engine_1_1_add>` is a numeric coefficient ``coef_`` and a dictionary ``dict_`` of key-value pairs.

.. code-block:: cpp

	Add(coef_, {{key1, value1}, {key2, value2}, ... })

This represents the following expression,

.. code-block:: cpp

	coef_ + key1*value1 + key2*value2 + ...

``coef_`` and the values of dictionary are numeric coefficients like :ref:`Integer <doxid-class_sym_engine_1_1_integer>`, :ref:`RealDouble <doxid-class_sym_engine_1_1_real_double>`, :ref:`Complex <doxid-class_sym_engine_1_1_complex>` ``key`` s can be any symbolic expression except numeric coefficients and ``:ref:`Mul <doxid-class_sym_engine_1_1_mul>``` objects with coefficient != 1.

For example, the following are valid representations

.. code-block:: cpp

	Add(1, {{x, 2}, {y, 5}})
	Add(0, {{x, 1}, {y, 4}, {z, 3}})

Following are invalid representations. (valid equivalent is shown next to them)

.. code-block:: cpp

	Add(1, {{x, 1}, {2*y, 3})   -> Add(1, {{x, 1}, {y, 6}})
	Add(0, {{x, 2}})             -> Mul(2, {{x, 1}})
	Add(1, {{x, 2}, {4, 6}})    -> Add(25, {{x, 2}})

Construction
------------

.. index:: pair: function; Add
.. _doxid-class_sym_engine_1_1_add_1ac832f62e9a48f2c19d41ab921cf9e5a6:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Add(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`&& dict)

The dictionary of the rest (e.g. ``x+y`` in ``2+x+y``)

Constructs :ref:`Add <doxid-class_sym_engine_1_1_add>` from a dictionary by copying the contents of the dictionary. Assumes that the input is in canonical form

Methods
-------

.. index:: pair: function; __hash__
.. _doxid-class_sym_engine_1_1_add_1a1e7cf7534f01607a31f6bcbebe91001e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual :ref:`hash_t<doxid-namespace_sym_engine_1a455620f815334592057d7966d62d5de6>` __hash__() const

Calculates the hash of the given :ref:`SymEngine <doxid-namespace_sym_engine>` class. Use :ref:`Basic.hash() <doxid-class_sym_engine_1_1_basic_1af71e629c952b7390d72f2d4b24694b62>` which gives a cached version of the hash.



.. rubric:: Returns:

64-bit integer value for the hash

.. index:: pair: function; __eq__
.. _doxid-class_sym_engine_1_1_add_1aaa89b52a2593191b97c662839a8ab8da:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual bool __eq__(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const

true if ``this`` is equal to ``o``. Deprecated: Use :ref:`eq(const Basic &a, const Basic &b) <doxid-namespace_sym_engine_1a2861dd1747fa1416cd6ef023ef08fca5>` non-member method

.. index:: pair: function; compare
.. _doxid-class_sym_engine_1_1_add_1a5f1511d3891ec886a1a0f0f501ca05a2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual int compare(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const

Returns -1, 0, 1 for ``this < o, this == o, this > o``. This method is used when you want to sort things like ``x+y+z`` into canonical order. This function assumes that ``o`` is the same type as ``this``. Use ``__cmp__`` if you want general comparison.

.. index:: pair: function; as_two_terms
.. _doxid-class_sym_engine_1_1_add_1a730c364a7004b3732eee2ac0eb8ac591:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void as_two_terms(const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& a, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& b) const

Converts the :ref:`Add <doxid-class_sym_engine_1_1_add>` into a sum of two :ref:`Basic <doxid-class_sym_engine_1_1_basic>` objects and returns them.

.. index:: pair: function; is_canonical
.. _doxid-class_sym_engine_1_1_add_1a7782a0236cf42833ff18d00da711f353:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool is_canonical(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, const :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`& dict) const



.. rubric:: Returns:

``true`` if a given dictionary and a coefficient is in canonical form

.. index:: pair: function; get_args
.. _doxid-class_sym_engine_1_1_add_1ada43e03b4589aa1399e80b11be4c2b37:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual :ref:`vec_basic<doxid-namespace_sym_engine_1a7b5fa751fc652b4e8a3b0e1cf1d7d9d1>` get_args() const

Returns the arguments of the :ref:`Add <doxid-class_sym_engine_1_1_add>`. For an :ref:`Add <doxid-class_sym_engine_1_1_add>` of the form,

.. code-block:: cpp

	Add(coef_, {{key1, value1}, {key2, value2}, ... })

if coef\_ is non-zero it returns,

.. code-block:: cpp

	{coef_, key1*value1, key2*value2, ... }

otherwise it returns,

.. code-block:: cpp

	{key1*value1, key2*value2, ... }



.. rubric:: Returns:

list of arguments

.. index:: pair: function; get_coef
.. _doxid-class_sym_engine_1_1_add_1ab625ca9ff6463bfc394caf9b1bb649ca:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& get_coef() const



.. rubric:: Returns:

const reference to the coefficient of the :ref:`Add <doxid-class_sym_engine_1_1_add>`

.. index:: pair: function; get_dict
.. _doxid-class_sym_engine_1_1_add_1aeaa562e337f5f1aa2607af177ca98219:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	const :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`& get_dict() const



.. rubric:: Returns:

const reference to the dictionary of the :ref:`Add <doxid-class_sym_engine_1_1_add>`

.. index:: pair: function; from_dict
.. _doxid-class_sym_engine_1_1_add_1a307db20756a09c9f2bc7a5983e3ea3fb:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> from_dict(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`&& d)

Creates appropriate instance (i.e :ref:`Add <doxid-class_sym_engine_1_1_add>`, :ref:`Symbol <doxid-class_sym_engine_1_1_symbol>`, :ref:`Integer <doxid-class_sym_engine_1_1_integer>`, :ref:`Mul <doxid-class_sym_engine_1_1_mul>`) depending on the size of dictionary ``d``.

.. index:: pair: function; dict_add_term
.. _doxid-class_sym_engine_1_1_add_1ab78c545d33cd594482669eb3b3a64949:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static void dict_add_term(:ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`& d, const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& t)

Adds ``(coeff*t)`` to the dict ``d``

.. index:: pair: function; coef_dict_add_term
.. _doxid-class_sym_engine_1_1_add_1a64a2d1ac7763318fb25ad10f050cf475:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static void coef_dict_add_term(const Ptr<RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>>& coef, :ref:`umap_basic_num<doxid-namespace_sym_engine_1ab37a0fc09c189e2d50880c64ebc5137e>`& d, const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& c, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& term)

Adds ``(c*term)`` to the number ``coeff`` (in case both are numbers) or dict ``d`` (as a pair ``c, term``). In case ``term`` is ``:ref:`Add <doxid-class_sym_engine_1_1_add>``` and ``c=1``, expands the ``:ref:`Add <doxid-class_sym_engine_1_1_add>``` into the ``coeff`` and ``d``.

.. index:: pair: function; as_coef_term
.. _doxid-class_sym_engine_1_1_add_1aef5fea9002f5edbcc2e88bb31ec4f06c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static void as_coef_term(const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& self, const Ptr<RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>>& coef, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& term)

Converts a :ref:`Basic <doxid-class_sym_engine_1_1_basic>` ``self`` into the form of ``coefficient * term``

