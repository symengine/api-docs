.. index:: pair: class; SymEngine::Mul
.. _doxid-class_sym_engine_1_1_mul:

class SymEngine::Mul
====================

.. toctree::
	:hidden:

Overview
~~~~~~~~

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` class keeps a product of symbolic expressions. :ref:`More...<details-class_sym_engine_1_1_mul>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <mul.h>
	
	class Mul: public :ref:`SymEngine::Basic<doxid-class_sym_engine_1_1_basic>` {
	public:
		// construction
	
		:ref:`Mul<doxid-class_sym_engine_1_1_mul_1a6bfba46699f9a48bc713972a8f22a33e>`(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`&& dict);

		// methods
	
		virtual :ref:`hash_t<doxid-namespace_sym_engine_1a455620f815334592057d7966d62d5de6>` :ref:`__hash__<doxid-class_sym_engine_1_1_mul_1abe0b8b540eef4be1aba2e135d01aed0f>`() const;
		virtual bool :ref:`__eq__<doxid-class_sym_engine_1_1_mul_1aa9f6a1a362742db3d3b7792711746396>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const;
		virtual int :ref:`compare<doxid-class_sym_engine_1_1_mul_1ae918361c32ac53756616de7aa5785c9e>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const;
		void :ref:`as_two_terms<doxid-class_sym_engine_1_1_mul_1aad7a77beff9e1c5eb7b956a072ff7df9>`(const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& a, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& b) const;
		void :ref:`power_num<doxid-class_sym_engine_1_1_mul_1ac117537ce827a19b79cd39324881d4b0>`(const Ptr<RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>>& coef, :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& d, const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& exp) const;
		bool :ref:`is_canonical<doxid-class_sym_engine_1_1_mul_1a4218dc84c35feb16cbe4e3c2b82f844f>`(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, const :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& dict) const;
		virtual :ref:`vec_basic<doxid-namespace_sym_engine_1a7b5fa751fc652b4e8a3b0e1cf1d7d9d1>` :ref:`get_args<doxid-class_sym_engine_1_1_mul_1aa4a64a32ae758274976ea2097384de79>`() const;
		const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& :target:`get_coef<doxid-class_sym_engine_1_1_mul_1ab0e9ec55b6660e0b099013ba953f469c>`() const;
		const :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& :target:`get_dict<doxid-class_sym_engine_1_1_mul_1a5e1f54ef9b81314d4284a7ccbb22390e>`() const;
		static RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`from_dict<doxid-class_sym_engine_1_1_mul_1ab8e2f2039c048fe0a09b346df85ba65d>`(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`&& d);
		static void :ref:`dict_add_term<doxid-class_sym_engine_1_1_mul_1a92c226852b7225c483761ddb74e196ff>`(:ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& d, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& exp, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& t);
		static void :target:`dict_add_term_new<doxid-class_sym_engine_1_1_mul_1a1ca2fbc6dae06d59977ed31131f39aba>`(const Ptr<RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>>& coef, :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& d, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& exp, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& t);
		static void :ref:`as_base_exp<doxid-class_sym_engine_1_1_mul_1a770b81872d66430fb57217063de9a37c>`(const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& self, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& exp, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& base);
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// fields
	
		:ref:`TypeID<doxid-namespace_sym_engine_1a976db42c9dfad76ad2c95a6038cbc093>` :ref:`type_code_<doxid-class_sym_engine_1_1_basic_1afc3cac9dbdf56974a961c8b2cdb4dfea>`;

		// methods
	
		RCP<T> :ref:`rcp_from_this<doxid-class_sym_engine_1_1_enable_r_c_p_from_this_1aed6b2bd25fd3fd124a5e97427f8372f2>`();
		RCP<const T> :ref:`rcp_from_this<doxid-class_sym_engine_1_1_enable_r_c_p_from_this_1aefdd4958f591ee705b60ea92d661a775>`() const;
	
		template <class T2>
		RCP<const T2> :ref:`rcp_from_this_cast<doxid-class_sym_engine_1_1_enable_r_c_p_from_this_1a122635053dc63f074487aa3ba0df13a1>`() const;
	
		unsigned int :ref:`use_count<doxid-class_sym_engine_1_1_enable_r_c_p_from_this_1acbea1ba6881779f17a5b81c0fd0eb2d2>`() const;
		:ref:`TypeID<doxid-namespace_sym_engine_1a976db42c9dfad76ad2c95a6038cbc093>` :ref:`get_type_code<doxid-class_sym_engine_1_1_basic_1a3837186572bf82a499cf81259d945804>`() const;
		:ref:`Basic<doxid-class_sym_engine_1_1_basic>`& :ref:`operator=<doxid-class_sym_engine_1_1_basic_1a8ddc236758a9cdd0fafadad57bfa4b09>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`&);
		:ref:`Basic<doxid-class_sym_engine_1_1_basic>`& :ref:`operator=<doxid-class_sym_engine_1_1_basic_1af04d269a2434302330e05a94238527a2>`(:ref:`Basic<doxid-class_sym_engine_1_1_basic>`&&);
		virtual :ref:`hash_t<doxid-namespace_sym_engine_1a455620f815334592057d7966d62d5de6>` :ref:`__hash__<doxid-class_sym_engine_1_1_basic_1ac950eca7e8403248252115bcba2e3ab1>`() const = 0;
		:ref:`hash_t<doxid-namespace_sym_engine_1a455620f815334592057d7966d62d5de6>` :ref:`hash<doxid-class_sym_engine_1_1_basic_1af71e629c952b7390d72f2d4b24694b62>`() const;
		virtual bool :ref:`__eq__<doxid-class_sym_engine_1_1_basic_1ac6a957e2006026f74c08ae6795f5ff7f>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const = 0;
		bool :ref:`__neq__<doxid-class_sym_engine_1_1_basic_1a3a3e923c9078ac82e01e453e80fa2134>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const;
		int :ref:`__cmp__<doxid-class_sym_engine_1_1_basic_1adb2def25bca4104f085ae99c57af5ab3>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const;
		virtual int :ref:`compare<doxid-class_sym_engine_1_1_basic_1af03cfca16a93aaa0aff2382cc2b5087f>`(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const = 0;
		std::string :ref:`__str__<doxid-class_sym_engine_1_1_basic_1a905153d35107acc23b37e04e1b430420>`() const;
		RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`subs<doxid-class_sym_engine_1_1_basic_1a7a502ee14598f873fefff54fac433d48>`(const :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& subs_dict) const;
		RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`xreplace<doxid-class_sym_engine_1_1_basic_1a2a7d7c5de904a663634679523c9a5348>`(const :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& subs_dict) const;
		virtual RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`expand_as_exp<doxid-class_sym_engine_1_1_basic_1a6423cc8431a87cbb88e010887904b274>`() const;
		virtual :ref:`vec_basic<doxid-namespace_sym_engine_1a7b5fa751fc652b4e8a3b0e1cf1d7d9d1>` :ref:`get_args<doxid-class_sym_engine_1_1_basic_1a6544293931047d6d9097e81f7d306cae>`() const = 0;
		RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> :ref:`diff<doxid-class_sym_engine_1_1_basic_1ad4e255f317caaaf57acabff9f6161b65>`(const RCP<const :ref:`Symbol<doxid-class_sym_engine_1_1_symbol>`>& x, bool cache = true) const;

.. _details-class_sym_engine_1_1_mul:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` class keeps a product of symbolic expressions. Internal representation of an :ref:`Mul <doxid-class_sym_engine_1_1_mul>` is a numeric coefficient ``coef_`` and a dictionary ``dict_`` of key-value pairs.

.. code-block:: cpp

	Mul(coef_, {{key1, value1}, {key2, value2}, ... })

This represents the following expression,

.. code-block:: cpp

	coef_ * key1^value1 * key2^value2 * ...

``coef_`` is an objecct of type :ref:`Number <doxid-class_sym_engine_1_1_number>`, i.e. a numeric coefficient like :ref:`Integer <doxid-class_sym_engine_1_1_integer>`, :ref:`RealDouble <doxid-class_sym_engine_1_1_real_double>`, :ref:`Complex <doxid-class_sym_engine_1_1_complex>`.

For example, the following are valid representations

.. code-block:: cpp

	Mul(2, {{x, 2}, {y, 5}})
	Mul(3, {{x, 1}, {y, 4}, {z, 3}})

Following are invalid representations. (valid equivalent is shown next to them)

When key is a numeric and value is an integers,

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2, {{3, 2}, {x, 2}}) -> :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (18, {{x, 2}}) :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2, {{I, 3}, {x, 2}}) -> :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (-2\*I, {{x, 2}})

When key is an integer and value is a :ref:`Rational <doxid-class_sym_engine_1_1_rational>` not in the range (0, 1)

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2, {{3, 3/2}, {x, 2}}) -> :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (6, {{3, 1/2}, {x, 2}}) :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2, {{3, -1/2}, {x, 2}}) -> :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2/3, {{3, 1/2}, {x, 2}})

When the value is zero

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` (3, {{x, 0}, {y, 2}}) -> :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (3, {{y, 2}})

When key and value are numeric and one of them is inexact

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2, {{3, 0.5}, {x, 2}}) -> :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (3.464..., {x, 2}})

When ``coef_`` is one and the dictionary is of size 1

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` (1, {{x, 2}}) -> Pow(x, 2)

When ``coef_`` is zero

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` (0, {{x, 2}}) -> Integer(0) :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (0.0, {{x, 2}}) -> :ref:`RealDouble <doxid-class_sym_engine_1_1_real_double>` (0.0)

When key is 1

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2, {{1, x}, {x, 2}}) -> :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2, {{x, 2}})

When value is zero

:ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2, {{1, x}, {x, 2}}) -> :ref:`Mul <doxid-class_sym_engine_1_1_mul>` (2, {{x, 2}})

Construction
------------

.. index:: pair: function; Mul
.. _doxid-class_sym_engine_1_1_mul_1a6bfba46699f9a48bc713972a8f22a33e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Mul(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`&& dict)

the dictionary of the rest (e.g. ``x*y`` in ``2*x*y``)

Constructs :ref:`Mul <doxid-class_sym_engine_1_1_mul>` from a dictionary by copying the contents of the dictionary:

Methods
-------

.. index:: pair: function; __hash__
.. _doxid-class_sym_engine_1_1_mul_1abe0b8b540eef4be1aba2e135d01aed0f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual :ref:`hash_t<doxid-namespace_sym_engine_1a455620f815334592057d7966d62d5de6>` __hash__() const



.. rubric:: Returns:

size of the hash

.. index:: pair: function; __eq__
.. _doxid-class_sym_engine_1_1_mul_1aa9f6a1a362742db3d3b7792711746396:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual bool __eq__(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const

:ref:`Equality <doxid-class_sym_engine_1_1_equality>` comparator



.. rubric:: Parameters:

.. list-table::
	:widths: 20 80

	*
		- o

		- - Object to be compared with



.. rubric:: Returns:

whether the 2 objects are equal

.. index:: pair: function; compare
.. _doxid-class_sym_engine_1_1_mul_1ae918361c32ac53756616de7aa5785c9e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual int compare(const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`& o) const

Returns -1, 0, 1 for ``this < o, this == o, this > o``. This method is used when you want to sort things like ``x+y+z`` into canonical order. This function assumes that ``o`` is the same type as ``this``. Use ``__cmp__`` if you want general comparison.

.. index:: pair: function; as_two_terms
.. _doxid-class_sym_engine_1_1_mul_1aad7a77beff9e1c5eb7b956a072ff7df9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void as_two_terms(const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& a, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& b) const

Rewrite as 2 terms.

Example: if this=3\*x\*\*2\*y\*\*2\*z\*\*2 ``, then`` a=x\*\*2 ``and`` b=3\*y\*\*2\*z\*\*2`

.. index:: pair: function; power_num
.. _doxid-class_sym_engine_1_1_mul_1ac117537ce827a19b79cd39324881d4b0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void power_num(const Ptr<RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>>& coef, :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& d, const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& exp) const

Power all terms with the exponent ``exp``

.. index:: pair: function; is_canonical
.. _doxid-class_sym_engine_1_1_mul_1a4218dc84c35feb16cbe4e3c2b82f844f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	bool is_canonical(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, const :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& dict) const



.. rubric:: Returns:

true if both ``coef`` and ``dict`` are in canonical form

.. index:: pair: function; get_args
.. _doxid-class_sym_engine_1_1_mul_1aa4a64a32ae758274976ea2097384de79:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	virtual :ref:`vec_basic<doxid-namespace_sym_engine_1a7b5fa751fc652b4e8a3b0e1cf1d7d9d1>` get_args() const

Returns the list of arguments.

.. index:: pair: function; from_dict
.. _doxid-class_sym_engine_1_1_mul_1ab8e2f2039c048fe0a09b346df85ba65d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`> from_dict(const RCP<const :ref:`Number<doxid-class_sym_engine_1_1_number>`>& coef, :ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`&& d)

Create a :ref:`Mul <doxid-class_sym_engine_1_1_mul>` from a dict.

.. index:: pair: function; dict_add_term
.. _doxid-class_sym_engine_1_1_mul_1a92c226852b7225c483761ddb74e196ff:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static void dict_add_term(:ref:`map_basic_basic<doxid-namespace_sym_engine_1abd5a60ffdc356a9901e6cfbf118daf53>`& d, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& exp, const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& t)

:ref:`Add <doxid-class_sym_engine_1_1_add>` terms to dict.

.. index:: pair: function; as_base_exp
.. _doxid-class_sym_engine_1_1_mul_1a770b81872d66430fb57217063de9a37c:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static void as_base_exp(const RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>& self, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& exp, const Ptr<RCP<const :ref:`Basic<doxid-class_sym_engine_1_1_basic>`>>& base)

Convert to a base and exponent form.

